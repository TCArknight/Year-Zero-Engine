<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definitions of components associated directly with the
      actor and its management.
-->

<document signature="Hero Lab Structure">

  <!-- Actor component
        Encapsulates all the details associated with every actor
  -->
  <component
    id="Actor"
    name="Actor"
    autocompset="no"
    ispublic="no">

    <!-- Image to display in the TacCon -->
    <field
      id="acTacImage"
      name="Image"
      type="derived">
      </field>

    <!-- Number of hands of equipment the actor can use simultaneously -->
    <field
      id="acHands"
      name="Hands Available"
      type="derived"
      defvalue="2">
      </field>

    <!-- Minimum (starting) health for the actor -->
    <field
      id="acHPMin"
      name="Min Health"
      type="derived">
      <!-- Calculate the base health value for the actor from its pieces. We have to
            calculate the value from its pieces instead of just getting the net trait
            value. This is because Health must be calculated BEFORE the final value
            for derived traits, since derived traits may be influenced by the net health
            (e.g. attack penalties after taking sufficient damage).
      -->
      <calculate phase="Traits" priority="5000" name="Calc acHPMin"><![CDATA[
        @value = #traitbonus[trHealth] + #traitinplay[trHealth]
        ]]></calculate>
      </field>

    <!-- Bonus health for the actor -->
    <field
      id="acHPBonus"
      name="Bonus Health"
      type="derived">
      <!-- Calculate any health bonus that the actor receives from other sources.
      -->
      <calculate phase="Traits" priority="5000" name="Calc acHPBonus"><![CDATA[
        ~.... add any suitable code here to calculate this for the game system ....
        @value = 0
        ]]></calculate>
      </field>

    <!-- Maximum health for the actor -->
    <field
      id="acHPMax"
      name="Max Health"
      type="derived">
      <!-- Calculate the maximum health for the actor as the minimum plus any bonus.
      -->
      <calculate phase="Traits" priority="5002" name="Calc acHPMax">
        <after name="Calc acHPMin"/>
        <after name="Calc acHPBonus"/><![CDATA[
        @value = field[acHPMin].value + field[acHPBonus].value
        ]]></calculate>
      </field>

    <!-- Current health -->
    <field
      id="acHPNow"
      name="Current Health"
      type="derived">
      <!-- Calculate the current health for the actor based on the maximum and any
            actual damage that has been sustained.
      -->
      <calculate phase="Traits" priority="5100" name="Calc acHPNow">
        <after name="Calc acHPMax"/><![CDATA[
        @value = field[acHPMax].value - hero.usagepool[DmgNet].value
        ]]></calculate>
      </field>

    <!-- Health penalty adjustment due to damage effects -->
    <field
      id="acHPPenal"
      name="Health Penalty"
      type="derived"
      maxfinal="50">
      <!-- Calculate any penalty adjustment applied due to substantial damage effects.
            For example, if the actor has sustained enough damage, he might suffer
            penalties on attack roles.
      -->
      <calculate phase="Traits" priority="5200" name="Calc acHPPenal">
        <after name="Calc acHPNow"/><![CDATA[
        ~for our example, once an actor is down to 25% of health or less, a -1 is
        ~incurred on all attacks
        if (field[acHPNow].value / field[acHPMax].value <= .25) then
          @value = -1
        else
          @value = 0
          endif
        ]]></calculate>
      <!-- Final value for display shows any negative value in red and ignores other values -->
      <finalize><![CDATA[
        if (@value >= 0) then
          @text = ""
        else
          @text = "{text clrwarning}(" & @value & "){text clrreset}"
          endif
        ]]></finalize>
      </field>

    <!-- Health summary for display -->
    <field
      id="acHPSumm"
      name="Health Summary"
      type="derived"
      maxfinal="50">
      <!-- Calculate a value that is based on all the fields referenced by the
            "finalize" script. This ensures that the field always changes if any of
            its pieces changes, which triggers the finalized value to be updated.
      -->
      <calculate phase="Render" priority="1000">
        <after name="Calc acHPNow"/><![CDATA[
        ~make sure this value consists of the elements that could cause the summary to change
        @value = field[acHPNow].value * 10000 + field[acHPMax].value * 100 + field[acHPPenal].value
        ]]></calculate>
      <!-- Final value for display show the current and maximum health, plus any
            penalty value in parentheses.
      -->
      <finalize><![CDATA[
        @text = field[acHPNow].value & " / " & field[acHPMax].value
        if (field[acHPPenal].value < 0) then
          @text &= " {text clrwarning}(" & field[acHPPenal].value & "){text clrreset}"
          endif
		  
		if (hero.tagis[SettingFlag.DamageSteps3] <> 0) then
		  @text &= " - {text clrbright}" & field[acHPStepSumm].text & "{text clrreset}"
		  endif
        ]]></finalize>
      </field>
	  
    <!-- Health summary for display -->
    <field
      id="acHPStepSumm"
      name="Health Step Summary"
      type="derived"
      maxlength="20">

      </field>
    <!-- Power point summary for display -->
    <field
      id="acPPSumm"
      name="Power Summary"
      type="derived"
      maxfinal="50">
      <!-- Calculate a value that is based on all the fields referenced by the
            "finalize" script. This ensures that the field always changes if any of
            its pieces changes, which triggers the finalized value to be updated.
      -->
      <calculate phase="Render" priority="1000"><![CDATA[
        ~make sure this value consists of the elements that could cause the summary to change
        @value = hero.child[trkPower].field[trkLeft].value * 100 + hero.child[trkPower].field[trkMax].value
        ]]></calculate>
      <!-- Final value for display shows the current and maximum power points.
      -->
      <finalize><![CDATA[
        @text = hero.child[trkPower].field[trkUser].value & " / " & hero.child[trkPower].field[trkMax].value
        ]]></finalize>
      </field>

    <!-- Power point summary for display -->
    <field
      id="acStressSumm"
      name="Stress Summary"
      type="derived"
      maxfinal="50">
      <!-- Calculate a value that is based on all the fields referenced by the
            "finalize" script. This ensures that the field always changes if any of
            its pieces changes, which triggers the finalized value to be updated.
      -->
      <calculate phase="Render" priority="1000"><![CDATA[
        ~make sure this value consists of the elements that could cause the summary to change
        @value = hero.childfound[trkStress].field[trkLeft].value * 100 + hero.childfound[trkStress].field[trkMax].value
        ]]></calculate>
      <!-- Final value for display shows the current and maximum power points.
      -->
      <finalize><![CDATA[
        @text = hero.childfound[trkStress].field[trkUser].value & " / " & hero.childfound[trkStress].field[trkMax].value
        ]]></finalize>
      </field>

    <!-- Starting character points to allocate -->
    <field
      id="acStartCP"
      name="Character Points"
      type="user"
      defvalue="250">
      </field>

    <!-- Starting Attribute points for the character -->
    <field
      id="acStartAttrib"
      name="Starting Attribute Points"
      type="derived"
      defvalue="0">
      </field>

    <field
      id="acBonusAttrib"
      name="Bonus Attribute Points"
      type="user"
      defvalue="0">
      </field>	  
	  
    <field
      id="acTotalAttrib"
      name="Total Attribute Points"
      type="derived"
      defvalue="0">
      </field>

    <!-- Starting ability slots to allocate -->
    <field
      id="acStartAbi"
      name="Ability Slots"
      type="user"
      defvalue="1">
      </field>

    <!-- Starting ability slots to allocate -->
    <field
      id="acStartSpec"
      name="Specialty Slots"
      type="derived"
      defvalue="1">
      </field>

    <field
      id="acBonusSpec"
      name="Bonus Specialty Points"
      type="derived"
      defvalue="0">
      </field>
	  
    <field
      id="acTotalSpec"
      name="Total Starting Specialties"
      type="derived"
      defvalue="0">
      </field>
	  
    <!-- Term to be used for Specialties -->
    <field
      id="acSpecialtyTerm"
      name="Specialty Term"
      type="derived"
      maxlength="20"
      defvalue="Specialty">
      </field>
    <field
      id="acSpecialtyTermP"
      name="Specialty Term - Plural"
      type="derived"
      maxlength="20"
      defvalue="Specialties">
      </field>	  
    <!-- Starting XP for the character -->
    <field
      id="acStartXP"
      name="Starting XP"
      type="user">
      </field>

    <!-- Starting Attribute points for the character -->
    <field
      id="acStartSkillPts"
      name="Starting Skill Points"
      type="derived"
      defvalue="0">
      </field>

    <field
      id="acBonusSkillPts"
      name="Bonus Skill Points"
      type="derived"
      defvalue="0">
      </field>
	  
    <field
      id="acTotalSkillPts"
      name="Total Skill Points"
      type="derived"
      defvalue="0">
      </field>
	  
    <!-- Starting cash for the character -->
    <field
      id="acCashCfg"
      name="Starting Cash"
      type="user"
      defvalue="100">
      </field>

    <!-- Net cash for the character -->
    <field
      id="acCashNet"
      name="Starting Cash"
      type="derived">
      </field>

    <!-- Top age to still be considered Young -->
    <field
      id="acAgeYoung"
      name="Age - Young limit"
      type="derived"
      defvalue="25">
      </field>

    <!-- Top age to still be considered Adult -->
    <field
      id="acAgeAdult"
      name="Age - Adult limit"
      type="derived"
      defvalue="50">
      </field>
	  
    <!-- Character type - Hero, NPC, or other -->
    <field
      id="acType"
      name="Character Type"
      type="user"
      style="menu"
      defthing="typHero">
      </field>

    <!-- For NPCs, you can enter a book id (SKU) and name -->
    <field
      id="acBookId"
      name="Book Identifier / SKU"
      type="user"
      maxlength="25">
      </field>
    <field
      id="acBookName"
      name="Book Name"
      type="user"
      maxlength="100">
      </field>

    <!-- Whether character is abandoning his action in combat for benefits in the next turn  -->
    <field
      id="acAbandon"
      name="Abandoning"
      type="derived"
      persistence="full">
      </field>

    <!-- Index of the last advancement for the character -->
    <field
      id="acLastAdv"
      name="Last Advancement"
      type="derived">
      </field>

    <!-- Magic-Related expression -->
    <field
      id="acMagicExp"
      name="Magic exp."
      type="derived"
      maxlength="500">
      </field>
	  
    <!-- Term to be used for the Faction -->
    <field
      id="acArchPriTerm"
      name="Primary Archetype Term"
      type="derived"
      maxlength="20"
      defvalue="Archetype">
      </field>

    <!-- Name to be used for the Faction -->
    <field
      id="acArchPriName"
      name="Primary Archetype Name"
      type="derived"
      maxlength="50">
      </field>

    <!-- Term to be used for the Secondary Archetype -->
    <field
      id="acArchSecTerm"
      name="Secondary Archetype Term"
      type="derived"
      maxlength="20"
      defvalue="Archetype">
      </field>

    <!-- Name to be used for the Secondary Archetype -->
    <field
      id="acArchSecName"
      name="Secondary Archetype Name"
      type="derived"
      maxlength="50">
      </field>
	  
    <field
      id="acArchPriLimitExp"
      name="Tagexp to limit Pri. Arch."
      type="derived"
      maxlength="1000"
      defvalue="ArchetypeCat.Primary">
      </field>

    <field
      id="acArchSecLimitExp"
      name="Tagexp to limit Sec. Arch."
      type="derived"
      maxlength="1000"
      defvalue="ArchetypeCat.Secondary">
      </field>
	  
    <field
      id="acArchTalPriExp"
      name="Pri. Arch. Talent exp."
      type="derived"
      maxlength="500">
      </field>
	  
    <!-- Starting ability slots to allocate -->
    <field
      id="acArchTalPriNum"
      name="Pri. Arch. Talent Slots"
      type="derived"
      defvalue="0">
      </field>
	  
    <field
      id="acArchTalSecExp"
      name="Sec. Arch. Talent exp."
      type="derived"
      maxlength="500">
      </field>
	  
    <field
      id="acArchTalSecNum"
      name="Sec. Arch. Talent Slots"
      type="derived"
      defvalue="0">
      </field>	
	  
    <!-- Optional setting-related fields -->
	
    <field
      id="acOptPride"
      name="Pride"
      type="derived"
      maxlength="1000">
      </field>
    <field
      id="acOptWeakness"
      name="Pride"
      type="derived"
      maxlength="1000">
      </field>
    <field
      id="acOptDarkSecret"
      name="Dark Secret"
      type="derived"
      maxlength="1000">
      </field>
    <field
      id="acOptBigDream"
      name="Big Dream"
      type="derived"
      maxlength="1000">
      </field> 
    <field
      id="acOptAgenda"
      name="Dark Secret"
      type="derived"
      maxlength="1000">
      </field>
    <field
      id="acOptMoralCode"
      name="Big Dream"
      type="derived"
      maxlength="1000">
      </field> 
    <field
      id="acOptHowMet"
      name="Dark Secret"
      type="derived"
      maxlength="1000">
      </field>
    <field
      id="acOptDrive"
      name="Drive"
      type="derived"
      maxlength="1000">
      </field>
    <field
      id="acOptIssue"
      name="Issue"
      type="derived"
      maxlength="1000">
      </field>
	  
   <!-- Encumbrance-related fields -->
    <field
      id="acCarryCombat"
      name="Current Combat Carry"
      type="derived"
	  decimals="2"
      defvalue="0">
      </field>

    <field
      id="acCarryCombatMax"
      name="Maximum Combat Carry"
      type="derived"
	  decimals="2"
      defvalue="0">
      </field>

    <!-- Encumbrance-related fields -->
    <field
      id="acCarryBack"
      name="Current Backpack Carry"
      type="derived"
	  decimals="2"
      defvalue="0">
      </field>

    <field
      id="acCarryBackMax"
      name="Maximum Backpack Carry"
      type="derived"
	  decimals="2"
      defvalue="0">
      </field>
	  
    <field
      id="acCarryCargo"
      name="Current Cargo Carried"
      type="derived"
	  decimals="2"
      defvalue="0">
      </field>

    <field
      id="acCarryCargoMax"
      name="Maximum Cargo Carry"
      type="derived"
	  decimals="2"
      defvalue="0">
      </field>
	  
    <!-- Whether character is starving -->
    <field
      id="acStarving"
      name="Is Starving?"
      type="user">
      </field>

    <!-- Text for whether character is starving -->
    <field
      id="acStarvingTxt"
      name="Starving Text"
      type="derived"
      maxfinal="50">
      <!-- Calculate a value based on all fields referenced by the "finalize" script -->
      <calculate phase="Render" priority="1000"><![CDATA[
        @value = field[acStarving].value
        ]]></calculate>
      <!-- Highlight the text in red when the character is shaken -->
      <finalize><![CDATA[
        @text = ""
        if (@value <> 0) then
          @text = "{text clrwarning}"
          endif
        @text &= "Starving"
        ]]></finalize>
      </field>

    <!-- Whether character is starving -->
    <field
      id="acDehydrated"
      name="Is Dehydrated?"
      type="user">
      </field>

    <!-- Text for whether character is starving -->
    <field
      id="acDehydratedTxt"
      name="Dehydrated Text"
      type="derived"
      maxfinal="50">
      <!-- Calculate a value based on all fields referenced by the "finalize" script -->
      <calculate phase="Render" priority="1000"><![CDATA[
        @value = field[acDehydrated].value
        ]]></calculate>
      <!-- Highlight the text in red when the character is shaken -->
      <finalize><![CDATA[
        @text = ""
        if (@value <> 0) then
          @text = "{text clrwarning}"
          endif
        @text &= "Dehydrated"
        ]]></finalize>
      </field>	

    <!-- Whether character is starving -->
    <field
      id="acSleepDep"
      name="Is Sleep Deprived?"
      type="user">
      </field>

    <!-- Text for whether character is starving -->
    <field
      id="acSleepDepTxt"
      name="Dehydrated Text"
      type="derived"
      maxfinal="50">
      <!-- Calculate a value based on all fields referenced by the "finalize" script -->
      <calculate phase="Render" priority="1000"><![CDATA[
        @value = field[acSleepDep].value
        ]]></calculate>
      <!-- Highlight the text in red when the character is shaken -->
      <finalize><![CDATA[
        @text = ""
        if (@value <> 0) then
          @text = "{text clrwarning}"
          endif
        @text &= "Sleep Deprived"
        ]]></finalize>
      </field>

    <!-- Whether character is starving -->
    <field
      id="acHypothermic"
      name="Is Hypothermic?"
      type="user">
      </field>

    <!-- Text for whether character is starving -->
    <field
      id="acHypothermicTxt"
      name="Hypothermic Text"
      type="derived"
      maxfinal="50">
      <!-- Calculate a value based on all fields referenced by the "finalize" script -->
      <calculate phase="Render" priority="1000"><![CDATA[
        @value = field[acHypothermic].value
        ]]></calculate>
      <!-- Highlight the text in red when the character is shaken -->
      <finalize><![CDATA[
        @text = ""
        if (@value <> 0) then
          @text = "{text clrwarning}"
          endif
        @text &= "Hypothermic"
        ]]></finalize>
      </field>
	  
    <tag group="Stage" tag="Minimal"/>

	<!-- Timing: before the existence expression on the baRace table in
       tab_basics.dat, which is currently at Initialize/10. That existence
       expression needs to come before the containerreq on rHuman, which is
       at Initialize/500 -->
	<eval index="1" phase="Initialize" priority="10" name="Process MinionSet.?"><![CDATA[
	  if (hero.tagis[MinionSet.Vehicle] <> 0) then
		perform hero.assign[Hero.FixedRace]
		perform hero.assign[Hero.Minion]
		perform hero.assign[CharacterType.Vehicle]
		perform hero.assign[CharType.Vehicle]
	  elseif (hero.tagis[MinionSet.Critter] <> 0) then
		perform hero.assign[Hero.FixedRace]
		perform hero.assign[Hero.Minion]
		perform hero.assign[CharacterType.NPCCritter]
		endif
	  ]]></eval>
	  
    <!-- Assign tags relating to important damage states -->
    <eval index="2" phase="Final" priority="1000"><![CDATA[
      ~if no damage has been incurred, assign a tag to indicate that state
      if (field[acHPNow].value >= field[acHPMax].value) then
        perform hero.assign[Hero.NoDamage]

      ~if the hero is dead or otherwise out of combat, indicate that state
      elseif (field[acHPNow].value = 0) then
        perform hero.assign[Hero.Dead]
        endif
      ]]></eval>

    <!-- Copy the first user image for use in the TacCon -->
    <eval index="3" phase="Final" priority="1000"><![CDATA[
      ~all heroes should be able to reroll initiative
      perform hero.assign[Hero.RerollInit]

      field[acTacImage].value = hero.findchild[UserImage,"TRUE",_CompSeq_].field[uimgImage].value
      ]]></eval>

    <!-- calculate the net cash possessed for the character -->
    <eval index="4" phase="Effects" priority="5000"><![CDATA[
      ~our net cash is our configured starting cash plus our accrued cash
      field[acCashNet].value = field[acCashCfg].value + hero.usagepool[TotalCash].value
      ]]></eval>

    <!-- activate our selected character type -->
    <eval index="5" phase="Setup" priority="5000"><![CDATA[
      perform field[acType].chosen.forward[CharType.?]
      ]]></eval>


    <!-- calculate the starting attribute points for the character -->
    <eval index="6" phase="Initialize" priority="1100" name="Calc Start Attr Pts"><![CDATA[
	  var total as number
	  total = field[acStartAttrib].value
	  total += field[acBonusAttrib].value
      
	  
	  if (hero.tagis[SettingFlag.DicePool] = 1) then
		if (field[acStartAttrib].value = 0) then
		  total += 14
		  endif
		
		~ if aging is used, adjust for aging
        if (hero.tagis[SettingFlag.AgeAdjust] = 1) then
          if (hero.childfound[mscPerson].field[perAge].value <= field[acAgeYoung].value) then
		    ~ adjust for young
		    total += 1
	      elseif (hero.childfound[mscPerson].field[perAge].value >= field[acAgeAdult].value) then
		    ~ adjust for old
		    total -= 1
		    endif 
	      endif		

	  elseif (hero.tagis[SettingFlag.StepDice] = 1) then
	    if (field[acStartAttrib].value = 0) then
		  total += 20
		  endif
		endif
	  
      field[acTotalAttrib].value = total 
	  
      ]]></eval>
	  
    <!-- calculate the starting skill points for the character -->
    <eval index="7" phase="Initialize" priority="1100" name="Calc Start Skill Pts"><![CDATA[
	  var total as number
	  total = field[acStartSkillPts].value
	  total += field[acBonusSkillPts].value
	  
	  if (hero.tagis[SettingFlag.DicePool] = 1) then
	    if (field[acStartSkillPts].value = 0) then
		  total += 10
		  endif
		
		~ if aging is used, adjust for aging
        if (hero.tagis[SettingFlag.AgeAdjust] = 1) then
          if (hero.childfound[mscPerson].field[perAge].value <= field[acAgeYoung].value) then
		    ~ adjust for young
		    total -= 2
	      elseif (hero.childfound[mscPerson].field[perAge].value >= field[acAgeAdult].value) then
		    ~ adjust for old
		    total += 2
		    endif 
	      endif		

	  elseif (hero.tagis[SettingFlag.StepDice] = 1) then
	    if (field[acStartSkillPts].value = 0) then
		  total += 34
		  endif
		endif
	  		
      field[acTotalSkillPts].value = total 
	  
      ]]></eval>

    <!-- calculate the starting attribute points for the character -->
    <eval index="8" phase="Initialize" priority="1100" name="Calc Start Specialties"><![CDATA[
	  var total as number
	  total = field[acStartSpec].value
	  total += field[acBonusSpec].value
      	  
 	  ~ if aging is used, adjust for aging
      if (hero.tagis[SettingFlag.AgeAdjust] = 1) then
        if (hero.childfound[mscPerson].field[perAge].value <= field[acAgeYoung].value) then
		  ~ adjust for young
		  total -= 1
	    elseif (hero.childfound[mscPerson].field[perAge].value >= field[acAgeAdult].value) then
		  ~ adjust for old
		  total += 1
		  endif 
	      endif		

	  
      field[acTotalSpec].value = total 
	  
      ]]></eval>

    <!-- set archetype-related fields -->
    <eval index="9" phase="Initialize" priority="5000"><![CDATA[
	  var keyAttrTag as string
	  
      field[acArchPriTerm].text = hero.tagnames[ArchetypeNamePri.?,";"]
      field[acArchSecTerm].text = hero.tagnames[ArchetypeNameSec.?,";"]
	  

      ]]></eval>
	  
    <!-- Set Key Attributes/Skills -->
    <eval index="10" phase="Initialize" priority="1500"><![CDATA[
	  var keyAttrTag as string
	  var keySkillTag as string

	  ~ Set Key Attributes
	  if (hero.tagis[SettingFlag.UseKeyAttributes] <> 0) then
	    keyAttrTag = hero.tagids[KeyAttribute.?,"|"]

	    foreach pick in hero from Attribute where keyAttrTag
		  perform eachpick.assign[Helper.KeyAttribute]
		  nexteach
	    endif
		
      ~ Set Key Skills
	  if (hero.tagis[SettingFlag.UseKeySkills] <> 0) then
	    keySkillTag = hero.tagids[KeySkill.?,"|"]

	    foreach pick in hero from Skill where keySkillTag
		  perform eachpick.assign[Helper.KeySkill]
		  nexteach
	    endif
      ]]></eval>

    <eval value="11" phase="Effects" priority="149" name="Prepare First Copy"><![CDATA[
      ~This eval script is meant to foreach through all the class specials
      ~and mark each as a FirstCopy or not. We do this with a foreach rather
      ~than a component script so that we can proceed from the lower level
      ~copies to the higher level copies, ensuring that Helper.FirstCopy ends
      ~up on the lowest level copy that is not disabled or replaced.
	  
      foreach pick in hero from xCopyTracker where "!Helper.SpcDisable"
        ~For things which are multiple copies, each independant, all of them are "first" copies.
        if (eachpick.tagis[Helper.MultiCopy] <> 0) then
          perform eachpick.assign[Helper.FirstCopy]
        else
          ~add the first active thing we found to our quick list - if quickadd
          ~returns nonzero, we were the first version, so add the "first copy" tag
          ~to ourselves.
          ~NOTE: at this point, we'll assume that the first copy is the only copy -
          ~the OnlyCopy tag is deleted in the "Determine First Copy" script if
          ~there's more than one.
          if (eachpick.quickadd <> 0) then
            perform eachpick.assign[Helper.FirstCopy]
            perform eachpick.assign[Helper.OnlyCopy]
            perform eachpick.quickadd
            endif
          endif
        nexteach

      ~The next step is going to take place in the BaseClSpec component script.
      ]]></eval>	

    <eval index="12" phase="Effects" priority="1000" name="Prepare Spell Expression"><![CDATA[
	  var splExpr as string
	  var GenRank as number 
	  var GenExpr as string
	  var SpecRank as number 
	  var SpecExpr as string
	  
      field[acMagicExp].text = "component.Spell"
	  
	  doneif (hero.tagis[Helper.MagicSpecialty] = 0)
	  
	  splExpr &= " & ("
	  
	  ~ General spell Rank depends on rank of highest casting specialty
	  foreach pick in hero from Specialty where "Helper.FirstCopy & Helper.MagicSpecialty"
		GenRank = eachpick.field[xCount].value
	    nexteach
	  GenExpr = "(Magic.magFLGeneral & val:MagicRank.?<=" & GenRank & ")"
      splExpr &= GenExpr
	  
	  ~ spell expr for Specific Magic Types
	  foreach pick in hero from Specialty where "Helper.FirstCopy & Helper.MagicSpecialty"
		SpecRank = eachpick.field[xCount].value
		SpecExpr = " | (" & eachpick.tagids[Magic.?,"|"] & " & val:MagicRank.?<=" & SpecRank & ")"
		splExpr &= SpecExpr
	   nexteach
		
	  splExpr &= ")"

	  field[acMagicExp].text &= splExpr
	  
      ]]></eval>	

    <eval index="13" phase="Render" priority="900" name="Calc acHPStepSumm">
        <after name="Calc acHPNow"/><![CDATA[  
		var myText as string
		
		if (hero.tagis[SettingFlag.DamageSteps3] <> 0) then
		  if (field[acHPNow].value = 3) then
		    myText &= "Unharmed"
		  elseif (field[acHPNow].value = 2) then
		    myText &= "Bruised"
		  elseif (field[acHPNow].value = 1) then
		    myText &= "Battered"
		  elseif (field[acHPNow].value = 0) then
		    myText &= "Broken"
		    endif
		  endif
	    
		field[acHPStepSumm].text = myText
      ]]></eval>	
	  
    </component>

  <!-- Personality Fields component
        
  -->
  <component
    id="OptPersonality"
    name="Optional Fields">
	
    <!-- Optional setting-related fields -->
    <field
      id="optPride"
      name="Pride"
      type="user"
      maxlength="1000">
      </field>
    <field
      id="optWeakness"
      name="Weakness"
      type="user"
      maxlength="1000">
      </field>	
    <field
      id="optDarkSecret"
      name="Dark Secret"
      type="user"
      maxlength="1000">
      </field>
    <field
      id="optBigDream"
      name="Big Dream"
      type="user"
      maxlength="1000">
      </field>	
    <field
      id="optAgenda"
      name="Personal Agenda"
      type="user"
      maxlength="1000">
      </field>	
    <field
      id="optMoralCode"
      name="Moral Code"
      type="user"
      maxlength="1000">
      </field>
    <field
      id="optHowMet"
      name="How Met Group"
      type="user"
      maxlength="1000">
      </field>
    <field
      id="optDrive"
      name="Drive"
      type="user"
      maxlength="1000">
      </field>
    <field
      id="optIssue"
      name="Issue"
      type="user"
      maxlength="1000">
      </field>
	  
    <!--  -->
    <eval index="1" phase="Render" priority="1000"><![CDATA[
      ~ transfer to herofields
      herofield[acOptPride].text = field[optPride].text
      herofield[acOptWeakness].text = field[optWeakness].text
      herofield[acOptDarkSecret].text = field[optDarkSecret].text
      herofield[acOptBigDream].text = field[optBigDream].text
      herofield[acOptAgenda].text = field[optAgenda].text
      herofield[acOptMoralCode].text = field[optMoralCode].text
      herofield[acOptHowMet].text = field[optHowMet].text
      herofield[acOptDrive].text = field[optDrive].text
      herofield[acOptIssue].text = field[optIssue].text

      ]]></eval>
    </component>	
	
  <!-- Personal component
        Encapsulates all of the personal details tracked on the Personal tab
  -->
  <component
    id="Personal"
    name="Personal Info"
    ispublic="no">

    <!-- Age of the actor -->
    <field
      id="perAge"
      name="Age"
      type="user"
      defvalue="25">
      <!-- Bound the age to within the limits specified for the actor -->
      <bound phase="Render" priority="10000"><![CDATA[
        @minimum = field[perAgeMin].value
        @maximum = field[perAgeMax].value
        ]]></bound>
      </field>

    <!-- Minimum age of the actor -->
    <field
      id="perAgeMin"
      name="Minimum Age"
      type="derived"
      defvalue="15">
      </field>

    <!-- Maximum age of the actor -->
    <field
      id="perAgeMax"
      name="Maximum Age"
      type="derived"
      defvalue="75">
      </field>

    <!-- Height of the actor (in inches) -->
    <field
      id="perHeight"
      name="Height"
      type="user"
      maxfinal="20"
      defvalue="68">
      <!-- Bound the age to within the limits specified for the actor -->
      <bound phase="Render" priority="10000"><![CDATA[
        @minimum = field[perHtMin].value
        @maximum = field[perHtMax].value
        ]]></bound>
      <!-- Final value for display is converted from inches to feet and inches -->
      <finalize><![CDATA[
        ~calculate the height in terms of feet and inches
        var feet as number
        var inches as number
        feet = @value / 12
        feet = round(feet,0,-1)
        inches = @value - (feet * 12)

        ~synthesize appropriate text to display the height properly
        @text = feet & "'"
        if (inches <> 0) then
          @text = @text & " " & inches & chr(34)
          endif
        ]]></finalize>
      </field>

    <!-- Minimum height of the actor -->
    <field
      id="perHtMin"
      name="Minimum Height"
      type="derived"
      defvalue="36">
      </field>

    <!-- Maximum height of the actor -->
    <field
      id="perHtMax"
      name="Maximum Height"
      type="derived"
      defvalue="96">
      </field>

    <!-- Weight of the actor (in pounds) -->
    <field
      id="perWeight"
      name="Weight"
      type="user"
      maxfinal="20"
      defvalue="160">
      <!-- Bound the weight to within the limits specified for the actor -->
      <bound phase="Render" priority="10000"><![CDATA[
        @minimum = field[perWtMin].value
        @maximum = field[perWtMax].value
        ]]></bound>
      <!-- Final value for display includes the "lb." suffix in a different font size -->
      <finalize><![CDATA[
        @text = @text & "{size 40}lb."
        ]]></finalize>
      </field>

    <!-- Minimum weight of the actor -->
    <field
      id="perWtMin"
      name="Minimum Weight"
      type="derived"
      defvalue="30">
      </field>

    <!-- Maximum weight of the actor -->
    <field
      id="perWtMax"
      name="Maximum Weight"
      type="derived"
      defvalue="500">
      </field>

    <!-- Gender of the actor (0=male, 1=female, 2=specify) -->
    <field
      id="perGender"
      name="Gender"
      type="user"
      minvalue="0"
      maxvalue="2"
      maxfinal="100"
      nevercache="yes">
      <finalize><![CDATA[
        if (@value = 0) then
          @text = "Male"
        elseif (@value = 1) then
          @text = "Female"
        elseif (field[perGenUser].isempty = 0) then
          @text = field[perGenUser].text
        else
          @text = "No Gender"
          endif
        ]]></finalize>
      </field>
    <field
      id="perGenUser"
      name="Gender"
      type="user"
      maxlength="100">
      </field>

    <!-- Hair color -->
    <field
      id="perHair"
      name="Hair Color"
      maxlength="25"
      type="user">
      </field>

    <!-- Eye color -->
    <field
      id="perEyes"
      name="Eye Color"
      maxlength="25"
      type="user">
      </field>

    <!-- Skin color -->
    <field
      id="perSkin"
      name="Skin Color"
      maxlength="25"
      type="user">
      </field>

    <!-- Background description of the actor -->
    <field
      id="perInfo"
      name="Background Text"
      type="user"
      maxlength="10000">
      </field>

    <eval index="1" phase="Setup" priority="1000"><![CDATA[
      ~ Assign a tag if the user hasn't specified any background text
      if (field[perInfo].isempty <> 0) then
        perform assign[Helper.NoPersText]
        endif
      ]]></eval>

    </component>


  <!-- Define various component sets associated with the components defined above.
  -->

  <!-- The "Personal" compset is auto-defined for the component -->

  <!-- Actor - all the collective one-shot details for the actor -->
  <compset
    id="Actor">
    <compref component="Actor"/>
    </compset>


  </document>
